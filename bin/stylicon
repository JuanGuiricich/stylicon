#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"

require_relative "../lib/stylicon"
require_relative "../lib/stylicon/generator"
require_relative "../lib/stylicon/transformer"
require_relative "../lib/stylicon/batch_transformer"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: Stylicon [options]"

  opts.on("--transform-svg INPUT", "Transform SVG file") { |value| options[:input] = value }
  opts.on("--out OUTPUT", "Output file") { |value| options[:output] = value }
  opts.on("--style STYLE", "CSS Style") { |value| options[:style] = value }
  opts.on("--classes CLASSES", "CSS Classes") { |value| options[:classes] = value }
  opts.on("--fill COLOR", "Fill Color") { |value| options[:fill] = value }
  opts.on("--stroke COLOR", "Stroke Color") { |value| options[:stroke] = value }
  opts.on("--width SIZE", "Width Size") { |value| options[:width] = value }
  opts.on("--height SIZE", "Height Size") { |value| options[:height] = value }
  opts.on("--input-folder FOLDER", "Input Folder for batch processing") { |value| options[:input_folder] = value }
end.parse!

if options[:input_folder] || (options[:input] && options[:input].include?("*"))
  input_pattern = options[:input_folder] ? nil : options[:input]

  Stylicon::BatchTransformer.new(
    output_folder: options[:output],
    input_folder: options[:input_folder],
    input_pattern: input_pattern,
    style: options[:style],
    classes: options[:classes],
    fill: options[:fill],
    stroke: options[:stroke],
    width: options[:width],
    height: options[:height]
  ).transform
  exit 0
elsif options[:input]
  Stylicon::Transformer.new(
    input_svg: options[:input],
    output_svg: options[:output],
    style: options[:style],
    classes: options[:classes],
    fill: options[:fill],
    stroke: options[:stroke],
    width: options[:width],
    height: options[:height]
  ).transform
  exit 0
end

config = ARGV[0] || "icons.yml"
output = ARGV[1] || "stylicon.css"

Stylicon::Generator.new(config, output).generate
